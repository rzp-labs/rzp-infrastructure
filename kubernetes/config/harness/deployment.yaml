apiVersion: v1
kind: ServiceAccount
metadata:
  name: harness
  namespace: harness
  labels:
    app.kubernetes.io/name: harness
    app.kubernetes.io/component: ci-cd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: harness
  namespace: harness
rules:
- apiGroups: [""]
  resources: ["pods", "secrets", "configmaps"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
- apiGroups: ["extensions", "networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch", "create", "update", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: harness
  namespace: harness
subjects:
- kind: ServiceAccount
  name: harness
  namespace: harness
roleRef:
  kind: Role
  name: harness
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: harness
  namespace: harness
  labels:
    app.kubernetes.io/name: harness
    app.kubernetes.io/component: ci-cd
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: harness
  template:
    metadata:
      labels:
        app.kubernetes.io/name: harness
    spec:
      serviceAccountName: harness
      containers:
      - name: harness
        image: harness/gitness:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
          name: http
          protocol: TCP
        - containerPort: 22
          name: ssh
          protocol: TCP
        env:
        - name: GITNESS_URL_BASE
          value: "https://harness.stg.rzp.one"
        - name: GITNESS_HTTP_PORT
          value: "3000"
        - name: GITNESS_SSH_PORT
          value: "22"
        volumeMounts:
        - name: data
          mountPath: /data
        - name: containerd-sock
          mountPath: /var/run/containerd/containerd.sock
        resources:
          requests:
            cpu: "250m"
            memory: "512Mi"
          limits:
            cpu: "1000m"
            memory: "2Gi"
        livenessProbe:
          httpGet:
            path: /api/v1/system/version
            port: 3000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/v1/system/version
            port: 3000
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: data
        persistentVolumeClaim:
          claimName: harness-data
      - name: containerd-sock
        hostPath:
          path: /run/k3s/containerd/containerd.sock
          type: Socket
      securityContext:
        fsGroup: 1000
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: harness-data
  namespace: harness
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 10Gi
---
apiVersion: v1
kind: Service
metadata:
  name: harness
  namespace: harness
  labels:
    app.kubernetes.io/name: harness
spec:
  type: ClusterIP
  ports:
  - port: 3000
    targetPort: 3000
    protocol: TCP
    name: http
  - port: 22
    targetPort: 22
    protocol: TCP
    name: ssh
  selector:
    app.kubernetes.io/name: harness
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: harness
  namespace: harness
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-staging
    traefik.ingress.kubernetes.io/router.entrypoints: websecure
    traefik.ingress.kubernetes.io/router.tls: 'true'
    traefik.ingress.kubernetes.io/router.middlewares: harness-default-headers@kubernetescrd
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - harness.stg.rzp.one
    secretName: harness-tls
  rules:
  - host: harness.stg.rzp.one
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: harness
            port:
              number: 3000