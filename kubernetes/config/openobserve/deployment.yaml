apiVersion: v1
kind: ConfigMap
metadata:
  name: openobserve-config
  namespace: observability
data:
  ZO_LOCAL_MODE: "false"
  ZO_LOCAL_MODE_STORAGE: "disk"
  ZO_HTTP_PORT: "5080"
  ZO_HTTP_ADDR: "0.0.0.0"
  ZO_GRPC_PORT: "5081"
  ZO_GRPC_ADDR: "0.0.0.0"
  ZO_ROUTE_TIMEOUT: "600"
  ZO_INSTANCE_NAME: "default"
  ZO_DATA_LIFECYCLE_DAYS: "30"
  ZO_COMPACT_ENABLED: "true"
  ZO_COMPACT_INTERVAL: "3600"
  ZO_COMPACT_SYNC_TO_DB_INTERVAL: "1800"
  ZO_MEMORY_CIRCUIT_BREAKER_ENABLE: "true"
  ZO_MEMORY_CIRCUIT_BREAKER_THRESHOLD: "80"
  ZO_TELEMETRY_ENABLED: "false"
  ZO_WEB_URL: "https://openobserve.stg.rzp.one"
  ZO_META_POSTGRES_DSN: "postgres://openobserve:$(DB_PASSWORD)@openobserve-postgres-postgresql:5432/openobserve"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: openobserve
  namespace: observability
  labels:
    app: openobserve
spec:
  serviceName: openobserve
  replicas: 0
  selector:
    matchLabels:
      app: openobserve
  template:
    metadata:
      labels:
        app: openobserve
    spec:
      securityContext:
        fsGroup: 2000
        runAsUser: 10001
        runAsGroup: 3000
        runAsNonRoot: true
      containers:
      - name: openobserve
        image: public.ecr.aws/zinclabs/openobserve:v0.10.9
        ports:
        - containerPort: 5080
          name: http
        - containerPort: 5081
          name: grpc
        env:
        - name: ZO_ROOT_USER_EMAIL
          value: "admin@rzp.one"
        - name: ZO_ROOT_USER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: openobserve-secrets
              key: openobserve-root-password
        - name: ZO_JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: openobserve-secrets
              key: openobserve-jwt-secret
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: openobserve-db-credentials
              key: openobserve-db-password
        envFrom:
        - configMapRef:
            name: openobserve-config
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2000m
            memory: 4Gi
        volumeMounts:
        - name: data
          mountPath: /data
        - name: tmp
          mountPath: /tmp
        readinessProbe:
          httpGet:
            path: /healthz
            port: 5080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /healthz
            port: 5080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 10001
      volumes:
      - name: tmp
        emptyDir: {}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "longhorn"
      resources:
        requests:
          storage: 20Gi
---
apiVersion: v1
kind: Service
metadata:
  name: openobserve
  namespace: observability
  labels:
    app: openobserve
spec:
  selector:
    app: openobserve
  ports:
  - name: http
    port: 5080
    targetPort: 5080
    protocol: TCP
  - name: grpc
    port: 5081
    targetPort: 5081
    protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: openobserve-headless
  namespace: observability
  labels:
    app: openobserve
spec:
  selector:
    app: openobserve
  ports:
  - name: http
    port: 5080
    targetPort: 5080
    protocol: TCP
  - name: grpc
    port: 5081
    targetPort: 5081
    protocol: TCP
  clusterIP: None
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: openobserve-ingress
  namespace: observability
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-staging"
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.middlewares: "observability-default-headers@kubernetescrd,observability-zitadel-auth@kubernetescrd"
spec:
  ingressClassName: traefik
  tls:
  - hosts:
    - openobserve.stg.rzp.one
    secretName: openobserve-tls
  rules:
  - host: openobserve.stg.rzp.one
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: openobserve
            port:
              number: 5080
